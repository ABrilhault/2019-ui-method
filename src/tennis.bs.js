// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");

function other(player) {
  if (player !== 0) {
    return /* PlayerOne */0;
  } else {
    return /* PlayerTwo */1;
  }
}

function incrementPoint(point) {
  switch (point) {
    case 0 : 
        return /* Some */[/* Fifteen */1];
    case 1 : 
        return /* Some */[/* Thirty */2];
    case 2 : 
        return /* None */0;
    
  }
}

function scoreWhenDeuce(winner) {
  return /* Advantage */Block.__(2, [winner]);
}

function scoreWhenAdvantage(advantagedPlayer, winner) {
  var match = +(advantagedPlayer === winner);
  if (match !== 0) {
    return /* Game */Block.__(3, [winner]);
  } else {
    return /* Deuce */0;
  }
}

function scoreWhenForty(current, winner) {
  var match = +(current[/* player */0] === winner);
  if (match !== 0) {
    return /* Game */Block.__(3, [winner]);
  } else {
    var match$1 = incrementPoint(current[/* otherPlayerPoint */1]);
    if (match$1) {
      return /* Forty */Block.__(1, [/* record */[
                  /* player */current[/* player */0],
                  /* otherPlayerPoint */match$1[0]
                ]]);
    } else {
      return /* Deuce */0;
    }
  }
}

function pointTo(player, point, current) {
  if (player !== 0) {
    return /* record */[
            /* playerOne */current[/* playerOne */0],
            /* playerTwo */point
          ];
  } else {
    return /* record */[
            /* playerOne */point,
            /* playerTwo */current[/* playerTwo */1]
          ];
  }
}

function pointFor(player, current) {
  if (player !== 0) {
    return current[/* playerTwo */1];
  } else {
    return current[/* playerOne */0];
  }
}

function scoreWhenPoints(current, winner) {
  var match = incrementPoint(pointFor(winner, current));
  if (match) {
    return /* Points */Block.__(0, [pointTo(winner, match[0], current)]);
  } else {
    return /* Forty */Block.__(1, [/* record */[
                /* player */winner,
                /* otherPlayerPoint */pointFor(other(winner), current)
              ]]);
  }
}

function scoreWhenGame(winner) {
  return /* Game */Block.__(3, [winner]);
}

function score(current, winner) {
  if (typeof current === "number") {
    return /* Advantage */Block.__(2, [winner]);
  } else {
    switch (current.tag | 0) {
      case 0 : 
          return scoreWhenPoints(current[0], winner);
      case 1 : 
          return scoreWhenForty(current[0], winner);
      case 2 : 
          return scoreWhenAdvantage(current[0], winner);
      case 3 : 
          return /* Game */Block.__(3, [current[0]]);
      
    }
  }
}

var newGame = /* Points */Block.__(0, [/* record */[
      /* playerOne : Love */0,
      /* playerTwo : Love */0
    ]]);

exports.other              = other;
exports.incrementPoint     = incrementPoint;
exports.scoreWhenDeuce     = scoreWhenDeuce;
exports.scoreWhenAdvantage = scoreWhenAdvantage;
exports.scoreWhenForty     = scoreWhenForty;
exports.pointTo            = pointTo;
exports.pointFor           = pointFor;
exports.scoreWhenPoints    = scoreWhenPoints;
exports.scoreWhenGame      = scoreWhenGame;
exports.score              = score;
exports.newGame            = newGame;
/* No side effect */
